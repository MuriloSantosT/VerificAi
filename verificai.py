# -*- coding: utf-8 -*-
"""VerificAi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1szP7Pz7bf8fhvtvhmlW_4OX0_xbsaR7b

# üîé VerificAI - Uma IA de suporte e an√°lise de curr√≠culos!

## Instala√ß√µes, importa√ß√µes e requisi√ß√µes necess√°rias para a execu√ß√£o correta do programa.
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip -q install google-generativeai
# %pip -q install google-adk
!pip install PyPDF2

import os
import sys
from google.colab import files, userdata
import PyPDF2
from google import genai
from IPython.display import display, Markdown
from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types
from datetime import date
import textwrap

os.environ["GOOGLE_API_KEY"] = userdata.get("GOOGLE_API_KEY")

"""Conex√£o agente - par√¢metro"""

def call_agent(agent: Agent, message_text: str) -> str:
    session_service = InMemorySessionService()
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    content = types.Content(role="user", parts=[types.Part(text=message_text)])
    final_response = ""
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
            for part in event.content.parts:
                if part.text:
                    final_response += part.text + "\n"
    return final_response.strip()

def to_markdown(text):
    text = text.replace('‚Ä¢', '  *')
    return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

"""Defini√ß√µes dos agentes e suas respectivas *caracter√≠sticas*"""

def agente_avaliador(curriculo_extraido: str):
    avaliador = Agent(
        name="agente_avaliador",
        model="gemini-2.0-flash",
        instruction="""
        Voc√™ √© um especialista s√™nior em Recursos Humanos, com vasta experi√™ncia em avalia√ß√£o de curr√≠culos.
        Sua tarefa √© analisar o conte√∫do abaixo de forma cr√≠tica e construtiva.

        Siga as diretrizes a seguir:

        1. Identifique e destaque os principais pontos fortes do candidato, incluindo habilidades t√©cnicas, experi√™ncias relevantes e conquistas not√°veis.
        2. Aponte de forma clara e respeitosa os aspectos que podem ser aprimorados, como organiza√ß√£o, clareza, formata√ß√£o, uso de palavras-chave ou linguagem profissional.
        3. Mantenha uma abordagem objetiva, profissional e direta. N√£o h√° necessidade de cumprimento.

        Evite generaliza√ß√µes. Foque em observa√ß√µes espec√≠ficas e √∫teis que realmente possam ajudar o candidato a melhorar seu curr√≠culo.
        """,
        description="Agente que avalia curr√≠culos criticamente."
    )
    entrada = f"Curr√≠culo:\n{curriculo_extraido}"
    return call_agent(avaliador, entrada)

def agente_otimizador(curriculo_extraido: str):
    otimizador = Agent(
        name="agente_otimizador",
        model="gemini-2.0-flash",
        instruction="""
        Voc√™ √© um especialista em revis√£o e otimiza√ß√£o de curr√≠culos, com ampla experi√™ncia em Recursos Humanos e comunica√ß√£o profissional.

        Revise o conte√∫do abaixo com o objetivo de torn√°-lo mais claro, direto e impactante. Fa√ßa os seguintes ajustes:
        - Corrija erros gramaticais, ortogr√°ficos e de pontua√ß√£o.
        - Reescreva trechos confusos ou amb√≠guos, aprimorando a fluidez do texto.
        - Adote uma linguagem profissional e assertiva, adequada ao contexto de um curr√≠culo competitivo.
        - Mantenha as informa√ß√µes relevantes, destacando conquistas, compet√™ncias e experi√™ncias de forma estrat√©gica.

        O texto resultante deve transmitir profissionalismo, credibilidade e destacar o potencial do candidato.
        """,
        description="Agente otimizador de curr√≠culo"
    )
    entrada = f"Curr√≠culo:\n{curriculo_extraido}"
    return call_agent(otimizador, entrada)

def agente_carta(curriculo_otimizado: str):
    redator = Agent(
        name="agente_carta",
        model="gemini-2.0-flash",
        instruction="""
        Voc√™ √© um redator profissional especializado na cria√ß√£o de cartas de apresenta√ß√£o impactantes e bem estruturadas.

        Com base no curr√≠culo fornecido, redija uma carta de apresenta√ß√£o em portugu√™s com linguagem formal e objetiva. Destaque os principais pontos fortes do candidato, como experi√™ncias relevantes, habilidades t√©cnicas e comportamentais, conquistas e diferenciais que o tornem atrativo para o mercado de trabalho.

        Adapte o tom para ser compat√≠vel com o perfil do profissional (j√∫nior, pleno ou s√™nior) e enfatize como ele pode contribuir para a empresa ou vaga desejada.

        A carta deve transmitir confian√ßa, profissionalismo e clareza, com uma estrutura l√≥gica e persuasiva.
        """,
        description="Agente que gera carta de apresenta√ß√£o"
    )
    entrada = f"Curr√≠culo:\n{curriculo_otimizado}"
    return call_agent(redator, entrada)

def agente_recomendador(curriculo_otimizado: str):
    recomendador = Agent(
        name="agente_recomendador",
        model="gemini-2.0-flash",
        instruction="""
        Voc√™ √© um mentor de carreira experiente, especializado em orientar profissionais em busca de crescimento e evolu√ß√£o.

        Com base no curr√≠culo apresentado, analise o perfil do candidato e forne√ßa recomenda√ß√µes personalizadas para os pr√≥ximos passos no desenvolvimento profissional, incluindo:

        - Habilidades t√©cnicas e comportamentais que devem ser aprimoradas ou adquiridas.
        - Ferramentas, softwares ou metodologias relevantes que o candidato deve aprender para se destacar na √°rea.
        - Tipos de projetos ou experi√™ncias pr√°ticas que podem fortalecer o curr√≠culo.
        - Recursos √∫teis para o aprendizado cont√≠nuo, como cursos (gratuitos ou pagos), livros, sites, comunidades ou certifica√ß√µes reconhecidas.

        Seja estrat√©gico, direto e contextualize as sugest√µes com base no n√≠vel atual do candidato, sempre visando um avan√ßo real e aplic√°vel no mercado de trabalho.
        """,
        description="Agente de carreira para pr√≥ximos passos"
    )
    entrada = f"Curr√≠culo:\n{curriculo_otimizado}"
    return call_agent(recomendador, entrada)

"""Execu√ß√£o principal"""

uploaded = files.upload()
file_name = list(uploaded.keys())[0]

if not file_name.lower().endswith(".pdf"):
    display(Markdown("‚ö†Ô∏è **O arquivo enviado n√£o √© um PDF. Por favor, envie um arquivo com extens√£o `.pdf`.**"))
    sys.exit()

try:
    with open(file_name, 'rb') as pdf:
        reader = PyPDF2.PdfReader(pdf)
        curriculo_extraido = "\n".join([page.extract_text() or "" for page in reader.pages])
except Exception as e:
    display(Markdown(f"‚ùå **Erro ao ler o arquivo PDF. Verifique se ele est√° corrompido ou √© um PDF v√°lido.**"))
    sys.exit()


print("üöÄ Iniciando an√°lise com os agentes da VerificAI...\n")

avaliacao = agente_avaliador(curriculo_extraido)
display(Markdown("## üìä Avalia√ß√£o Cr√≠tica"))
display(to_markdown(avaliacao))

otimizado = agente_otimizador(curriculo_extraido)
display(Markdown("## üìÑ Curr√≠culo Otimizado"))
display(to_markdown(otimizado))

carta = agente_carta(otimizado)
display(Markdown("## ‚úâÔ∏è Carta de Apresenta√ß√£o"))
display(to_markdown(carta))

recomendacoes = agente_recomendador(otimizado)
display(Markdown("## üß≠ Pr√≥ximos Passos"))
display(to_markdown(recomendacoes))

print("\n‚úÖ An√°lise finalizada com sucesso!")