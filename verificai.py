# -*- coding: utf-8 -*-
"""VerificAi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1szP7Pz7bf8fhvtvhmlW_4OX0_xbsaR7b

# üîé VerificAI - Uma IA de suporte e an√°lise de curr√≠culos!

## Instala√ß√µes, importa√ß√µes e requisi√ß√µes necess√°rias para a execu√ß√£o correta do programa.
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip -q install google-generativeai
# %pip -q install google-adk
!pip install PyPDF2

import os
from google.colab import files, userdata
import PyPDF2
from google import genai
from IPython.display import display, Markdown
from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types
from datetime import date
import textwrap

os.environ["GOOGLE_API_KEY"] = userdata.get("GOOGLE_API_KEY")

"""Conex√£o agente - par√¢metro"""

def call_agent(agent: Agent, message_text: str) -> str:
    session_service = InMemorySessionService()
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    content = types.Content(role="user", parts=[types.Part(text=message_text)])
    final_response = ""
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
            for part in event.content.parts:
                if part.text:
                    final_response += part.text + "\n"
    return final_response.strip()

def to_markdown(text):
    text = text.replace('‚Ä¢', '  *')
    return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

"""Defini√ß√µes dos agentes e suas respectivas *caracter√≠sticas*"""

def agente_avaliador(curriculo_extraido: str):
    avaliador = Agent(
        name="agente_avaliador",
        model="gemini-2.0-flash",
        instruction="""
        Voc√™ √© um avaliador de curr√≠culos experiente, um especialista na √°rea de recursos humanos. Avalie o conte√∫do a seguir:
        Mantenha-se centrado nos pontos abaixo:
        1. Destaque pontos fortes.
        2. Aponte √°reas de melhoria.
        3. Seja objetivo e profissional.
        """,
        description="Agente que avalia curr√≠culos criticamente."
    )
    entrada = f"Curr√≠culo:\n{curriculo_extraido}"
    return call_agent(avaliador, entrada)

def agente_otimizador(curriculo_extraido: str):
    otimizador = Agent(
        name="agente_otimizador",
        model="gemini-2.0-flash",
        instruction="""
        Voc√™ √© um especialista em revis√£o de curr√≠culos. Melhore a clareza, objetividade e impacto do conte√∫do abaixo.
        Corrija erros gramaticais e melhore a linguagem profissional.
        """,
        description="Agente otimizador de curr√≠culo"
    )
    entrada = f"Curr√≠culo:\n{curriculo_extraido}"
    return call_agent(otimizador, entrada)

def agente_carta(curriculo_otimizado: str):
    redator = Agent(
        name="agente_carta",
        model="gemini-2.0-flash",
        instruction="""
        Voc√™ √© um redator especializado em cartas de apresenta√ß√£o. Escreva uma carta em portugu√™s profissional
        com base no curr√≠culo abaixo, destacando os pontos fortes do candidato.
        """,
        description="Agente que gera carta de apresenta√ß√£o"
    )
    entrada = f"Curr√≠culo:\n{curriculo_otimizado}"
    return call_agent(redator, entrada)

def agente_recomendador(curriculo_otimizado: str):
    recomendador = Agent(
        name="agente_recomendador",
        model="gemini-2.0-flash",
        instruction="""
        Voc√™ √© um mentor de carreira. Com base no curr√≠culo abaixo, recomende os pr√≥ximos passos para o desenvolvimento profissional:
        - Habilidades a desenvolver
        - Ferramentas para aprender
        - Tipos de projeto para praticar
        - Recursos √∫teis (cursos, livros, etc)
        """,
        description="Agente de carreira para pr√≥ximos passos"
    )
    entrada = f"Curr√≠culo:\n{curriculo_otimizado}"
    return call_agent(recomendador, entrada)

"""Execu√ß√£o principal"""

uploaded = files.upload()
file_name = list(uploaded.keys())[0]
pdf = open(file_name, 'rb')
reader = PyPDF2.PdfReader(pdf)
curriculo_extraido = "\n".join([page.extract_text() for page in reader.pages])
pdf.close()

print("üöÄ Iniciando an√°lise com os agentes da VerificAI...\n")

avaliacao = agente_avaliador(curriculo_extraido)
display(Markdown("## üìä Avalia√ß√£o Cr√≠tica"))
display(to_markdown(avaliacao))

otimizado = agente_otimizador(curriculo_extraido)
display(Markdown("## üìÑ Curr√≠culo Otimizado"))
display(to_markdown(otimizado))

carta = agente_carta(otimizado)
display(Markdown("## ‚úâÔ∏è Carta de Apresenta√ß√£o"))
display(to_markdown(carta))

recomendacoes = agente_recomendador(otimizado)
display(Markdown("## üß≠ Pr√≥ximos Passos"))
display(to_markdown(recomendacoes))

print("\n‚úÖ An√°lise finalizada com sucesso!")